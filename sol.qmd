---
title: "Homework 3"
author: "[Solutions]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
---

[Link to the Github repository](https://github.com/psu-stat380/hw-3)

---

::: {.callout-important style="font-size: 0.8em;"}
## Due: Thu, Mar 2, 2023 @ 11:59pm

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset from the UCI Machine Learning Repository. The dataset consists of red and white _vinho verde_ wine samples, from the north of Portugal. The goal is to model wine quality based on physicochemical tests

We will be using the following libraries:

```{R, message=F, output=F, warning=F}
renv::activate()
packages <- c(
  "dplyr",
  "readr",
  "tidyr",
  "ggplot2",
  "purrr",
  "httpgd",
  "cowplot",
  "ISLR2",
  "stringr",
  "corrplot",
  "car",
  "glmnet",
  "caret",
  "broom"
)

lapply(packages, require, character.only=T)
```


```{R}
## You can use this function to 
## generate a formula from a vector of variables
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}
make_formula(c("a", "b", "c"))

## You can use this function to 
# generate a model matrix for glmnet()
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```

<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 50 points
Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in data frames `df1` and `df2`.

```{R cache=T}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read_delim(url1, delim=";")
df2 <- read_delim(url2, delim=";")
```

---

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1. Combine the two data frames into a single data frame `df`, adding a new column called `type` to indicate whether each row corresponds to white or red wine. 
1. Rename the columns of `df` to replace spaces with underscores
1. Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
1. Convert the `type` column to a factor
1. Remove rows (if any) with missing values.


```{R}
df <- bind_rows(
  df1 %>% mutate(type="white"), 
  df2 %>% mutate(type="red")
) %>% 
  rename_all(~str_replace_all(., " ", "_")) %>% 
  select(-c(fixed_acidity, free_sulfur_dioxide)) %>% 
  mutate(type = as.factor(type)) %>% 
  drop_na()
```


The output to `R dim(df)` is
```{R}
dim(df)
```



---

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the the difference in means (with the equal variance assumption)

1. Using `df` compute the mean of `quality` for red and white wine separately, and then store the difference in means as a variable called `diff_mean`. 

2. Compute the pooled sample variance and store the value as a variable called `sp_squared`. 

3. Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and store its value in a variable called `t1`.


```{R}
df_summary <- df %>% 
  group_by(type) %>% 
  summarize(
    mean = mean(quality), 
    sd = sd(quality), 
    n=length(quality)
)

diff_mean <- df_summary$mean %>% diff()

sp <- sum(
  df_summary$sd^2 * (df_summary$n-1)
  )  / sum(df_summary$n - 2)

t1 <- diff_mean / (sqrt(sp) * sqrt(1/(nrow(df1)) + 1/(nrow(df2))))
t1
```


---

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to perform a two-sample $t$-Test without having to compute the pooled variance and difference in means. 

Perform a two-sample t-test to compare the quality of white and red wines using the `t.test()` function with the setting `var.equal=TRUE`. Store the t-statistic in `t2`.

```{R}
t_test <- t.test(
  df %>% filter(type == "white") %>% select(quality),
  df %>% filter(type == "red")   %>% select(quality),
  var.equal=T
)

t2 <- t_test$statistic
```

---

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the `lm()` function, and extract the $t$-statistic for the `type` coefficient from the model summary. Store this $t$-statistic in `t3`.

```{R}
cat_model <- lm(quality ~ type, df)
t3 <- coef(summary(cat_model))[, "t value"][2]
```


---

###### 1.6  (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can you conclude from this? Why?

```{R}
c(t1, t2, t3) # Insert your code here
```

> The $t$-statistics from all three methods are equivalent. The method using $t_1$ produces slightly smaller values.




<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 25 points
Collinearity
:::


---

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response variable `quality`. Use the `broom::tidy()` function to print a summary of the fitted model. What can we conclude from the model summary?


```{R}
full_model <- lm(quality ~ ., df)
summary(full_model)
```

> The model is a good fit (based on the $F$-statistic). However, the `citric_acid` and `total_sulfur_dioxide` covariates don't seem to have significant effects on the wine quality. There is a possibility of multi-collinearity involving these variables. 


---

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only `citric_acid` as the predictor, and another with only `total_sulfur_dioxide` as the predictor. In both models, use `quality` as the response variable. How does your model summary compare to the summary from the previous question?


```{R}
model_citric <- lm(quality ~ citric_acid, df)
summary(model_citric)
```

```{R}
model_sulfur <- lm(quality ~ total_sulfur_dioxide, df)
summary(model_sulfur)
```

> Both these variables didn't seem to be significant predictors in `full_model`. However, individually, they seem to be highly significant predictors of wine quality. 

---

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
df %>% 
  select(where(is.numeric)) %>% 
  cor() %>% 
  round(digits=2) %>% 
  corrplot(diag=F)
```



---

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the full model using `vif()` function. What can we conclude from this?


```{R, message=F}
library(car)
vif(full_model) %>% knitr::kable()
```

> The VIF for `residual_sugar`, `density` and `type` are notably large. This evidences the presence of multi-collinearity in `full_model`



<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 40 points

Variable selection
:::


```{R}
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)
```


---

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the starting model. Store the final formula in an object called `backward_formula` using the built-in `formula()` function in R

```{R}
backward_model <- step(full_model, direction="backward")
backward_formula <- formula(backward_model)
backward_formula
```

---

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the starting model. Store the final formula in an object called `forward_formula` using the built-in `formula()` function in R

```{R}
forward_model <- step(full_model, direction="forward")
forward_formula <- formula(forward_model)
forward_formula
```



---

###### 3.3  (10 points)

1. Create a `y` vector that contains the response variable (`quality`) from the `df` dataframe. 

2. Create a design matrix `X` for the `full_model` object using the `make_model_matrix()` function provided in the Appendix. 

3. Then, use the `cv.glmnet()` function to perform LASSO and Ridge regression with `X` and `y`.

```{R}
y <- df$quality
```

```{R }
X <- make_model_matrix(full_model)
```


```{R }
lasso <- cv.glmnet(X, y, alpha=1)
ridge <- cv.glmnet(X, y, alpha=0)
```


Create side-by-side plots of the ridge and LASSO regression results. Interpret your main findings. 

```{R}
par(mfrow=c(1, 2))
plot(ridge, main="Ridge")
plot(lasso, main="LASSO")
```

---

###### 3.4  (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se` value? What are the variables selected by LASSO? 

Store the variable names with non-zero coefficients in `lasso_vars`, and create a formula object called `lasso_formula` using the `make_formula()` function provided in the Appendix. 


```{R}
lasso_coef <- coef(lasso, s="lambda.1se")
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
lasso_formula <- make_formula(lasso_vars)
lasso_formula
```

---

###### 3.5  (5 points)

Print the coefficient values for ridge regression at the `lambda.1se` value? What are the variables selected here? 

Store the variable names with non-zero coefficients in `ridge_vars`, and create a formula object called `ridge_formula` using the `make_formula()` function provided in the Appendix. 

```{R}
ridge_coef <- coef(ridge, s="lambda.1se")
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
ridge_formula <- make_formula(ridge_vars)
ridge_formula
```

---

###### 3.6  (10 points)

What is the difference between stepwise selection, LASSO and ridge based on you analyses above?

> LASSO selects far fewer variables than ridge regression





<br><br><br><br>
<br><br><br><br>
---

## Question 4
::: {.callout-tip}
## 70 points

Variable selection
:::

---

###### 4.1  (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the covariates. How many different models can we create using any subset of these $10$ coavriates as possible predictors? Justify your answer. 

> Each variable is either included or excluded from a model, resulting in $2$ possibilities. Therefore, the total number of possible models using the $10$ variables is $$2^{10} = 1024.$$ This number also includes the `null_model`, i.e., the model with only an intercept and no covariates. If we exclude this, we will have $2^{10}=1 = 1023$ different models

---


###### 4.2  (20 points)

Store the names of the predictor variables (all columns except `quality`) in an object called `x_vars`.

```{R}
x_vars <- colnames(df %>% select(-quality))
```

Use: 

* the `combn()` function (built-in R function) and 
* the `make_formula()` (provided in the Appendix) 

to **generate all possible linear regression formulas** using the variables in `x_vars`. This is most optimally achieved using the `map()` function from the `purrr` package.

```{R }
formulas <- map(
  1:length(x_vars),
  \(x){
    vars <- combn(x_vars, x, simplify=F)
    map(vars, make_formula)
  }
) %>% unlist()
```

> Here are $4$ randomly slected formulas
```{R}
sample(formulas, 4) %>% as.character()
```

---

###### 4.3  (10 points)
Use `map()` and `lm()` to fit a linear regression model to each formula in `formulas`, using `df` as the data source. Use `broom::glance()` to extract the model summary statistics, and bind them together into a single tibble of summaries using the `bind_rows()` function from `dplyr`.

```{R }
models <- map(formulas, \(x) lm(x, df))
summaries <- map(models, \(x) broom::glance(x)) %>% bind_rows()
```

```{R}
head(summaries) %>% knitr::kable()
```



---


###### 4.4  (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to identify the formula with the _**highest**_ adjusted R-squared value.

```{R}
Rsq <- summaries$adj.r.squared
```

Store resulting formula as a variable called `rsq_formula`.

```{R}
rsq_formula <- formulas[[which(Rsq == max(Rsq))]]
rsq_formula
```

---

###### 4.5  (5 points)

Extract the `AIC` values from `summaries` and use them to identify the formula with the **_lowest_** AIC value.


```{R}
aic <- summaries$AIC
```

Store resulting formula as a variable called `aic_formula`.


```{R}
aic_formula <- formulas[[which(aic == min(aic))]]
aic_formula
```

---

###### 4.6  (15 points)

Combine all formulas shortlisted into a single vector called `final_formulas`.

```{R}
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
```

* Are `aic_formula` and `rsq_formula` the same? How do they differ from the formulas shortlisted in question 3?

* Which of these is more reliable? Why? 

* If we had a dataset with $10,000$ columns, which of these methods would you consider for your analyses? Why?

---

###### 4.7  (10 points)


Use `map()` and `glance()` to extract the `sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model obtained from `final_formulas`. Bind them together into a single data frame `summary_table`. Summarize your main findings.

```{R}
summary_table <- map(
  final_formulas, 
  \(x) lm(x, df) %>%
    broom::glance() %>% 
    select(c(sigma, adj.r.squared, AIC, df, p.value))
) %>% bind_rows()

names <- c(
  "null_formula",
  "full_formula",
  "backward_formula",
  "forward_formula",
  "lasso_formula", 
  "ridge_formula",
  "rsq_formula",
  "aic_formula"
)
summary_table <- cbind(names, summary_table)

summary_table %>% knitr::kable()
```

> The minimum AIC model gives us the model with the fewest variables (along with LASSO), but has better Adjusted R squared and better AIC (obviously). It is interesting to note that the Backward regression method gives us the same model with far smaller computational overhead. 


```{R}
c(aic_formula, backward_formula, lasso_formula)
```
> On the other hand the maximum R squared model gives us a model with one additional variable, and better R squared. The Ridge formula is essentially the same as the full model, and we won't see any meaningful differences. 



:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---


# Appendix

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::